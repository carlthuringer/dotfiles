#+TITLE: Emacs ORG mode configuration file
#+AUTHOR: Carl Thuringer

* Introduction

  A bunch of this ORG mode stuff was ripped off of
  [[http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/][John Wiegley]] when I was learning how to use Org for GTD stuff. I
  don't know if I totally agree with everything done here, but it is
  helping me be more productive right now, so I guess that's good
  enough.

  First let's set up our directories.

  #+begin_src elisp
         (let* ((subdirs '("org"))
                (fulldirs (mapcar (lambda (d) (ha/emacs-subdirectory d)) subdirs)))
           (dolist (dir fulldirs)
             (when (not (file-exists-p dir))
               (message "Make directory: %s" dir)
               (make-directory dir))))
  #+end_src

  And then make sure we have =org-mode=

  #+begin_src elisp
    (use-package org
      :ensure t
      :init
      (setq org-return-follows-link t
            org-hide-emphasis-markers t
            org-completion-use-ido t
            org-outline-path-complete-in-steps nil
            org-src-fontify-natively t ;; pretty code blocks
            org-src-tab-acts-natively t
            org-confirm-babel-evaluate nil)
      :bind (:map org-mode-map ;; Do something nice when indenting inside a src block
                  ([remap org-return] . (lambda () (interactive)
                                          (if (org-in-src-block-p)
                                              (org-return)
                                            (org-return-indent))))
                  ))
  #+end_src

* Getting Things Done

** Agenda and Todos

   I want to globally configure my Agenda and todos:

   #+begin_src elisp
     (use-package org
       :init
       (setq
        org-todo-keywords '((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d)")
                            (sequence "|" "WAITING(w)" "CANCELED(c)"))
        org-agenda-files '("~/org/todo.org")
        org-default-notes-file "~/org/notes.org"
        org-directory "~/org")
       :bind (("C-c c" . org-capture)
              ("C-c a" . org-agenda))
       :config
       ;; Set up some capture templates to default to my org files
       (setq org-capture-templates
        '(("t" "Todo" entry
           (file+headline "~/org/todo.org" "Tasks")
           "* TODO %?")
          ("n" "Notes" entry
           (file "~/org/notes.org")
           "* %u %?"))
        org-agenda-custom-commands
        '(("u" alltodo "Unscheduled"
           ((org-agenda-skip-function
             (lambda nil
               (org-agenda-skip-entry-if 'scheduled 'deadline 'regexp "\n]+")))
            (org-agenda-overriding-header "Unscheduled TODO entries: "))))))
   #+end_src

* Literate Programming

  To support literate programming, we need to activate some language
  support for org-babel:

  #+begin_src elisp
    (use-package org
      :ensure t
      :config
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((shell . t)
         (ruby . t))))
  #+end_src

* Technical Artifacts

  Provide ourselves as a package

  #+begin_src elisp
    (provide 'init-org-mode)
  #+end_src

  When building on a new system, put the cursor over the following
  block of properties and hit =C-c C-c=

#+DESCRIPTION: A literate programming version of Emacs ORG Mode configuration.
#+PROPERTY:    header-args:elisp :tangle ~/.emacs.d/elisp/init-org-mode.el
#+PROPERTY:    header-args       :results silent :eval no-export :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
